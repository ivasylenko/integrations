from __future__ import annotations
from abc import ABC, abstractmethod
from fastapi import FastAPI, HTTPException
import uvicorn
{{imports}}



class AppController(ABC):

    {% for operation in operations %}
    def {{operation.function_name}}(self, {{operation.snake_case_arguments}}) -> {{operation.response}}:
        """This method should be implemented by the subclass."""
        raise HTTPException(status_code=404, detail="Not implemented")
    {% endfor %}


class IntegrationApp:

    def __init__(self):
        self.app = FastAPI(
            {% if info %}
            {% for key,value in info.items() %}
            {{ key }} = "{{ value }}",
            {% endfor %}
            {% endif %}
            )

    def set_controller(self, controller: AppController) -> IntegrationApp:
        """Set the controller for the application."""
        self.controller = controller
        return self

    def run(self):
        uvicorn.run(self.app)

    {% for operation in operations %}
    async def {{operation.function_name}}(self, {{operation.snake_case_arguments}}) -> {{operation.response}}:
        {%- if operation.summary %}
        """
        {{ operation.summary }}

        """
        {%- endif %}
        return self.controller.{{operation.function_name}}({{operation.snake_case_arguments}})
    {% endfor %}

    def setup_routes(self) -> IntegrationApp:
        """Set up the API routes for the integration."""

        {% for operation in operations %}
        self.app.add_api_route(
            "{{operation.path}}",
            self.{{operation.function_name}},
            response_model={{operation.response}},
            methods=["{{operation.type}}"]
        )
        {% endfor %}

        return self
